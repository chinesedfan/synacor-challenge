var _ = require('lodash');

var args = process.argv.slice(2);
var data = require(args[0]); // generated by `rpgcrawler.js`

var rSymbol = /mosaic depicting a '(.)' symbol/;
var rNumber = /mosaic depicting the number '(\d+)'/;

var sources = [];

_.map(data, function(item, index) {
    var matches;
    if (matches = rSymbol.exec(item.message)) {
        item.$operator = matches[1];
    } else if (matches = rNumber.exec(item.message)) {
        item.$number = parseInt(matches[1]);
    }

    if (isStart(item)) {
        sources.push(index);
    }
});
_.each(sources, function(root) {
    bfs(root);
});

function isStart(item) {
    return item.title === 'Vault Antechamber';
}
function isEnd(item) {
    return item.title === 'Vault Door';
}

function bfs(root) {
    var q = [], node, cnode;
    q.push({
        id: root,
        prefixes: [],
        symbols: [22],
        value: 22 // hard code
    });

    while (q.length) {
        node = q.shift();
        _.each(data[node.id].children, function(id) {
            child = data[id];
            if (!child.$operator && !child.$number) return;

            cnode = {
                id: id,
                prefixes: node.prefixes.concat([node.id]),
                symbols: node.symbols.concat([child.$operator || child.$number]),
                value: updateValue(node, child)
            };
            if (isEnd(data[id])) {
                // finally, found the path
                if (cnode.value == 30) {
                    // {"id":49,"prefixes":["43",44,73,69,55,71,67,69,72,69,55,54],"symbols":[22,"+",4,"-",11,"*",4,"-",18,"-",11,"-",1],"value":30}
                    console.log(JSON.stringify(cnode));
                    printExits(cnode.prefixes.concat([cnode.id]));
                }
            } else {
                q.push(cnode); 
            }
        });
    }
}
// `node` is BfsNode, while `child` is OriginNode
function updateValue(node, child) {
    if (child.$operator) return node.value;

    switch (node.symbols[node.symbols.length - 1]) {
    case '+':
        return node.value + child.$number;
    case '-':
        return node.value - child.$number;
    case '*':
        return node.value * child.$number;
    default:
        throw new Error('unknown operator');
    }
}
function printExits(ids) {
    var pre, cur, index;
    _.each(ids, function(id) {
        cur = data[id];
        if (pre) {
            index = pre.children.indexOf(id);
            console.log(pre.exits[index]);
        }
        pre = cur;
    });
}
